pbinom(q = 0, size = 4, prob=0.01)
pbinom(q = 1, size = 4, prob=0.01)
pbinom(q = 2, size = 4, prob=0.01)
dbinom(x = 2, size = 4, prob=0.01)
sum(dbinom(x = 0:4, size = 4, prob=0.01))
sum(dbinom(x = 0:3, size = 4, prob=0.01))
sum(dbinom(x = 0:2, size = 4, prob=0.01))
pbinom(q = 2, size = 4, prob=0.01)
pbinom(q = 3, size = 4, prob=0.01)
probcal <- function(p) pbinom(q = 2, size = 4, prob=p) + pbinom(q = 3, size = 4, prob=p)
probcal(0.01)
apply(ps, probcal)
sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs)
probs <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs, xlab = "p", ylab = "Probability of right decision")
plot(x = ps, y = probs, xlab = "p", ylab = "Probability of right decision")
abline(0, 1, lty=2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal <- function(p) 0.5*(1 - pbinom(q = 1, size = 4, prob=p)) + 0.5*(1 - pbinom(q = 2, size = 4, prob=p))
probs <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs, xlab = "p", ylab = "Probability of right decision")
plot(x = ps, y = probs, xlab = "p", ylab = "Probability of right decision")
abline(0, 1, lty=2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal <- function(p) (1 - pbinom(q = 1, size = 4, prob=p))
probs <- sapply(ps, probcal)
probs
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal <- function(p) (1 - pbinom(q = 1, size = 4, prob=p))
probs <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs, xlab = "p", ylab = "Probability of right decision")
?line
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 4, prob=p))
probs2 <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, xlab = "p", ylab = "Probability of right decision")
line(x = ps, y = probs)
plot(x = ps, y = probs2, xlab = "p", ylab = "Probability of right decision")
abline(x = ps, y = probs)
?abline
?curve
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs, lty = 1, xlab = "p", ylab = "Probability of right decision")
plot(x = ps, y = probs, lty = 1, xlab = "p", ylab = "Probability of right decision")
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs, type = "l", xlab = "p", ylab = "Probability of right decision")
plot(x = ps, y = probs, type = "l", xlab = "p", ylab = "Probability of right decision")
abline(0, 1, lty=2)
curve(probs ~ ps, add=TRUE)
curve(ps, probs, add=TRUE)
plot(x = ps, y = probs2, xlab = "p", ylab = "Probability of right decision")
curve(ps, probs, add=TRUE)
probs
probs2
ps <- seq(0, 1, by=0.01)
probcal <- function(p) 0.5*(1 - pbinom(q = 1, size = 4, prob=p)) + 0.5*(1 - pbinom(q = 2, size = 4, prob=p))
probs <- sapply(ps, probcal)
probs
probs2
plot(probs, probs2)
line(ps, prob)
plot(x = ps, y = probs2, xlab = "p", ylab = "Probability of right decision")
line(ps, probs)
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
line(ps, probs, col="blue")
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
line(ps, probs, col=2)
line(ps, probs)
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, col="blue")
legend(x = 1, y=1)
legend(x = 1, y=1, legend = c("five-person", "three-person"))
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, col="blue")
legend(x = 1, y=1, legend = c("five-person", "three-person"))
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, col="blue")
legend(x = 0.8, y=1, legend = c("five-person", "three-person"))
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, col="blue")
legend(x = 0.7, y=0.3, legend = c("five-person", "three-person"))
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, col="blue")
legend(x = 0.6, y=0.3, legend = c("five-person", "three-person"))
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, col="blue")
legend(x = 0.6, y=0.3, legend = c("five-person", "three-person"), col = c(1,2))
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("five-person", "three-person"), col = c("black","blue"), lty=1:2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 4, prob=p))
probs2 <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
ps <- seq(0, 1, by=0.01)
probcal <- function(p) 0.5*(1 - pbinom(q = 1, size = 4, prob=p)) + 0.5*(1 - pbinom(q = 2, size = 4, prob=p))
probs <- sapply(ps, probcal)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 4, prob=p))
probs2 <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
probs
probs2
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal <- function(p) 0.5*(1 - pbinom(q = 1, size = 4, prob=p)) + 0.5*(1 - pbinom(q = 2, size = 4, prob=p))
probs <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs, type = "l", xlab = "p", ylab = "Probability of right decision")
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 3, prob=p))
probs2 <- sapply(ps, probcal)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 3, prob=p))
probs2 <- sapply(ps, probcal2)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 3, prob=p))
probs2 <- sapply(ps, probcal2)
probs2
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 6, prob=p))
probs2 <- sapply(ps, probcal2)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 5, prob=p))
probs2 <- sapply(ps, probcal2)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 4, prob=p))
probs2 <- sapply(ps, probcal2)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
# Calculate probabilities of right decision for p = 0, 0.01, ..., 0.99,1
ps <- seq(0, 1, by=0.01)
probcal2 <- function(p) (1 - pbinom(q = 1, size = 3, prob=p))
probs2 <- sapply(ps, probcal2)
# Draw a plot of these probabilities versus p
plot(x = ps, y = probs2, type="l", xlab = "p", ylab = "Probability of right decision")
lines(ps, probs, lty=2, col="blue")
legend(x = 0.6, y=0.3, legend = c("three-person", "five-person"), col = c("black","blue"), lty=1:2)
runsOf3s <- function(x){
r <- rep(0, length(x))
if(x[1] == 3)r[1] <- 1
for(i in 2:length(x)){
if(x[i] == 3){r[i] <- r[i-1] + 1}else{r[i] <- 0}
}
return(r)
}
maxRunOf3s <- function(x){
return(max(runsOf3s(x)))
}
sample(1:6, 100, replace = TRUE)
rolls <- sample(1:6, 100, replace = TRUE)
maxRunOf3s(rolls)
maxes <- rep(0, nsims)
nsims <- 5000
maxes <- rep(0, nsims)
nsims <- 5000
maxes <- rep(0, nsims)
for (i in 1:nsims) {
rolls <- sample(1:6, 100, replace = TRUE)
maxes[i] <- maxRunOf3s(rolls)
}
maxes
sum(maxes >= 3)
sum(maxes >= 3)/nsims
a4 <- (6^4 - 20)/6^4
a4
(6^4 - 20)/6^4
36*6
(1/6)^3*5/216
3/6^4
a3 <- (1/6)^3
a4 <- (3)/6^4
a5 <- (6)/6^5
(5/6)*a3+(5/36)*a4+(5/216)*a5
15/6^6
36*5+30+5
6^3-215
36*6
(1/6)^3*5/216+1/216
(3)/6^4
(1/6)^3
0.00462963*5/216
0.00462963*5/216+1/216
(3)/6^4
(3)/6^4*2
(11)/6^4
(11)/（
(11)/(6^4)
a1 <- 0
a2 <- 0
a3 <- (1/6)^3
as <- rep(0,100)
as[1:3] <- c(a1, a2, a3)
for (k in 4:100) {
as[k] <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
}
as
as[100]
as > 0.5
as
for (k in 4:1000) {
ak <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
if (ak > 0.5) {
print(ak)
print(k)
break
}
}
ak > 0.5
ak
reptimes <- 1000
as <- rep(0,reptimes)
as[1:3] <- c(a1, a2, a3)
for (k in 4:reptimes) {
ak <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
if (ak > 0.5) {
print(ak)
print(k)
break
}
}
reptimes <- 10000
as <- rep(0,reptimes)
as[1:3] <- c(a1, a2, a3)
for (k in 4:reptimes) {
ak <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
if (ak > 0.5) {
print(ak)
print(k)
break
}
}
reptimes <- 100000
as <- rep(0,reptimes)
as[1:3] <- c(a1, a2, a3)
for (k in 4:reptimes) {
ak <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
if (ak > 0.5) {
print(ak)
print(k)
break
}
}
ak
reptimes <- 100000
as <- rep(0,reptimes)
as[1:3] <- c(a1, a2, a3)
for (k in 4:reptimes) {
as[k] <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
if (as[k] > 0.5) {
print(as[k])
print(k)
break
}
}
reptimes <- 500
as <- rep(0,reptimes)
as[1:3] <- c(a1, a2, a3)
for (k in 4:reptimes) {
as[k] <- (5/6) * as[k-1] + (5/36) * as[k-2] + (5/216) * as[k-3] + 1/216
if (as[k] > 0.5) {
print(as[k])
print(k)
break
}
}
setwd("~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework")
knitr::include_graphics('~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework/ps2_1a.png')
knitr::include_graphics('~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework/ps2_1b.png')
knitr::include_graphics()
?knitr::include_graphics()
install.packages("png")
library(png)
#knitr::include_graphics('~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework/ps2_1a.png')
png(filename = ps2_1a.png)
#knitr::include_graphics('~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework/ps2_1a.png')
png(filename = "ps2_1a.png")
#knitr::include_graphics('~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework/ps2_1a.png')
png(filename = "ps2_1a.png")
?readPNG
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('~/Documents/Master2-2/S&DS 538-Probability and Statistics/Homework/ps2_1a.png')
?svd
svd(iris)
iris
X <- model.matrix(formula,data)
data <- iris
formula <- Sepal.Length ~.
X <- model.matrix(formula,data)
y_name <- strsplit(as.character(formula)," ~ ")[[2]]
y <- as.matrix(data[y_name])
svd(X)
s <- svd(X)
s$d
1/s$d
diag(1/s$d)
?diag
head(X)
s <- svd(X)
X <- model.matrix(formula,data)
s <- svd(X)
y_name <- strsplit(as.character(formula)," ~ ")[[2]]
y <- as.matrix(data[y_name])
beta_hat <- s$v %*% diag(1/s$d) %*% t(s$u) %*% y
beta_hat
fit <- lm(Sepal.Length ~., iris)
fit$coefficients
beta_ha
beta_hat
list(coefficients=beta_hat)
coeff <- as.numeric(beta_hat)
names(coeff) <- rownames(beta_hat)
# Create an lm object to output
object <- list(coefficients=coeff)
class(object) <- "lm"
return(object)
object
object$Call
object$Call <- formula
object
object$Call
# Create an lm object to output
object <- list(call=formula, coefficients=coeff)
class(object) <- "lm"
object
# Change the format of coefficient
coeff <- as.numeric(beta_hat)
names(coeff) <- rownames(beta_hat)
# Create an lm object to output
object <- list(call=formula, coefficients=coeff)
object
fit
coeff
names(coeff) <- rownames(beta_hat)
coeff
rownames(beta_hat)
X
colnames(X)
# Change the format of coefficient
coeff <- as.numeric(beta_hat)
names(coeff) <- colnames(X)
# Create an lm object to output
object <- list(call=formula, coefficients=coeff)
class(object) <- "lm"
object
fit
paste("lm(formula = ", as.character(formula), "data =", data, ")")
name(data)
as.character(data)
deparse(substitute(data))
deparse(substitute(iris))
paste("lm(formula = ", as.character(formula), "data =", deparse(substitute(data)), ")")
paste("lm(formula = ", as.character(formula), "data =", deparse(substitute(data)), ")", sep = " ")
"lm(formula = "
as.character(formula)
paste("lm(formula = ", formula, "data =",
deparse(substitute(data)), ")", sep = " ")
formula
"data ="
deparse(substitute(data))
")"
paste("lm(formula = ", paste(as.character(formula)), "data =",
deparse(substitute(data)), ")", sep = " ")
paste(as.character(formula))
format(formula)
?format
paste("lm(formula = ", format(formula), "data =",
deparse(substitute(data)), ")", sep = " ")
paste("lm(formula = ", format(formula), "data =",
deparse(substitute(data)), ")")
fit
paste("lm(formula =", format(formula), ", data =",
deparse(substitute(data)), ")")
paste("lm(formula =", format(formula), ", data =",
deparse(substitute(data)), ")", sep="")
paste("lm(formula = ", format(formula), ", data = ",
deparse(substitute(data)), " )", sep="")
paste("lm(formula = ", format(formula), ", data = ",
deparse(substitute(data)), ")", sep="")
fit
# Create an lm object to output
object <- list(call=paste("lm(formula = ", format(formula),
", data = ", deparse(substitute(data)), ")", sep=""),
coefficients=coeff)
class(object) <- "lm"
object
fit
class(fit$call)
a <- paste("lm(formula = ", format(formula),
", data = ", deparse(substitute(data)), ")"
)
a
class(a) <- "call"
a
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @importFrom stats lm
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) {
# Define X and calculate svd of X
X <- model.matrix(formula,data)
s <- svd(X)
# Define y
y_name <- strsplit(as.character(formula)," ~ ")[[2]]
y <- as.matrix(data[y_name])
# Calculate coefficient estimate
beta_hat <- s$v %*% diag(1/s$d) %*% t(s$u) %*% y
# Change the format of coefficient
coeff <- as.numeric(beta_hat)
names(coeff) <- colnames(X)
# Create an lm object to output
object <- list(call=paste("lm(formula = ", format(formula),
", data = ", deparse(substitute(data)), ")", sep=""),
coefficients=coeff)
class(object) <- "lm"
return(object)
}
linear_model(Sepal.Length ~., iris)
fit
setwd("~/Documents/Master2-2/BIS 557-Computational Statistics/homework 1/bis557")
library(devtools)
devtools::test()
devtools::test()
load("~/Documents/Master2-2/BIS 557-Computational Statistics/homework 1/bis557/data/lm_patho.rda")
data <- lm_patho
formula <- formula("y ~.")
# Define X and calculate svd of X
X <- model.matrix(formula,data)
s <- svd(X)
# Define y
y_name <- strsplit(as.character(formula)," ~ ")[[2]]
y <- as.matrix(data[y_name])
# Calculate coefficient estimate
beta_hat <- s$v %*% diag(1/s$d) %*% t(s$u) %*% y
# Change the format of coefficient
coeff <- as.numeric(beta_hat)
names(coeff) <- colnames(X)
coeff
lm(y ~., lm_patho)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
lm_patho
-1e+00
1.0000e+09
-9.9999e-01
1e-05
lm_patho2 <- lm_patho[,-2]
lm_patho2
X <- model.matrix(formula,lm_patho2)
s <- svd(X)
# Calculate coefficient estimate
beta_hat <- s$v %*% diag(1/s$d) %*% t(s$u) %*% y
# Change the format of coefficient
coeff <- as.numeric(beta_hat)
names(coeff) <- colnames(X)
coeff
213.16/2
